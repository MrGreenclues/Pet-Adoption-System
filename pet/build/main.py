# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from tkinter import Frame, Tk, Canvas, Entry, Button, PhotoImage, ttk
import subprocess
import mysql.connector
from tkinter import Label
from tkinter import Text
from tkinter import ttk
import tkinter as tk
# Frame

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\xampp\htdocs\pet\build\assets\frame1")

# Establish a new connection and cursor to execute the query
mydb = mysql.connector.connect(
    host='localhost',       # Replace with your MySQL server host
    user='root',           # Replace with your MySQL username
    password='',           # Replace with your MySQL password
    database='pet'         # Replace with your MySQL database name
)

mycursor = mydb.cursor()

# Execute a query to fetch the IDs from your table
mycursor.execute("SELECT id FROM pet")

# Fetch all the IDs from the result set
ids = mycursor.fetchall()

# Close the cursor and database connection
mycursor.close()
mydb.close()

# Establish a new connection and cursor to execute the second query
mydb = mysql.connector.connect(
    host='localhost',       # Replace with your MySQL server host
    user='root',           # Replace with your MySQL username
    password='',           # Replace with your MySQL password
    database='pet'         # Replace with your MySQL database name
)

mycursor = mydb.cursor()

# # Execute a query to fetch the IDs from the 'adopt' table-----------------------------------------------------------------------------------------------------------------------------------
# mycursor.execute("SELECT id FROM adopt")

# # Fetch all the IDs from the result set
# adopt_ids = mycursor.fetchall()

# # Close the cursor and database connection
# mycursor.close()
# mydb.close()
# # Establish a new connection and cursor to execute the second query
# mydb = mysql.connector.connect(
#     host='localhost',       # Replace with your MySQL server host
#     user='root',           # Replace with your MySQL username
#     password='',           # Replace with your MySQL password
#     database='pet'         # Replace with your MySQL database name
# )

# mycursor = mydb.cursor()
mycursors = mydb.cursor()

mycursors.execute("SELECT id FROM adopt")

# Fetch all the IDs from the result set------------------------------------------------------------------------------------------
adopt_ids = mycursors.fetchall()

# Close the cursor and database connection
mycursors.close()
mydb.close()

# Establish a new connection and cursor to execute the second query
mydb = mysql.connector.connect(
    host='localhost',       # Replace with your MySQL server host
    user='root',           # Replace with your MySQL username
    password='',           # Replace with your MySQL password
    database='pet'         # Replace with your MySQL database name
)

mycursors = mydb.cursor()

def fetch_data():
    # Establish a connection to the database
    mydb = mysql.connector.connect(
        host='localhost',
        user='root',
        password='',
        database='pet'
    )
    mycursor = mydb.cursor()
    mycursor.execute("SELECT pname, pgender FROM pet")  # Corrected indentation
    rows = mycursor.fetchall()
    mycursor.close()
    mydb.close()
    return rows

def populate_treeview():
    # Clear existing data in Treeview
    for row in tree.get_children():
        tree.delete(row)
    
    # Fetch data from database
    data = fetch_data()
    
    # Insert fetched data into Treeview
    for row in data:
        tree.insert('', 'end', values=row)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def open_addpet():
    window.destroy()
    script_dir = Path(__file__).resolve().parent
    addpet_path = script_dir / "addpet2.py"
    subprocess.run(["python", str(addpet_path)])

def open_adopt():
    window.destroy()
    script_dir = Path(__file__).resolve().parent
    addpet_path = script_dir / "adoptpet.py"
    subprocess.run(["python", str(addpet_path)])

def open_login():
    window.destroy()
    script_dir = Path(__file__).resolve().parent
    addpet_path = script_dir / "login1.py"
    subprocess.run(["python", str(addpet_path)])


def fetch_owner_data():
    mydb = mysql.connector.connect(
        host='localhost',
        user='root',
        password='',
        database='pet'
    )
    mycursor = mydb.cursor()
    mycursor.execute("SELECT pname, owname FROM adopt")
    rows = mycursor.fetchall()
    mycursor.close()
    mydb.close()
    return rows

pet_tree = None  # Define the pet_tree variable

def fetch_pet_data():
    mydb = mysql.connector.connect(
        host='localhost',
        user='root',
        password='',
        database='pet'
    )
    mycursor = mydb.cursor()
    mycursor.execute("SELECT pname, pgender FROM pet")
    rows = mycursor.fetchall()
    mycursor.close()
    mydb.close()
    return rows

def populate_pet_treeview():
    for row in pet_tree.get_children():
        pet_tree.delete(row)
    data = fetch_pet_data()
    for row in data:
        pet_tree.insert('', 'end', values=row)

def populate_owner_treeview():
    for row in owner_tree.get_children():
        owner_tree.delete(row)
    data = fetch_owner_data()
    for row in data:
        owner_tree.insert('', 'end', values=row)

window = Tk()
window.geometry("996x534")
window.configure(bg="#BCD6BF")

canvas = Canvas(
    window,
    bg="#BCD6BF",
    height=534,
    width=996,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)
canvas.place(x=0, y=0)
canvas.create_rectangle(
    189.0,
    8.0,
    982.0,
    521.0,
    fill="#D9D9D9",
    outline=""
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=open_addpet,
    relief="flat"
)
# addpet

button_1.place(
    x=23.0,
    y=64.759521484375,
    width=153.0,
    height=47.77336120605469
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=open_adopt,
    relief="flat"
)
# adopt
button_2.place(
    x=23.0,
    y=145.011962890625,
    width=153.0,
    height=47.77336120605469
)
# logout
button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=open_login,
    relief="flat"
)
button_3.place(
    x=23.0,
    y=462.870849609375,
    width=153.0,
    height=47.77336120605469
)

canvas.create_rectangle(
    207.0,
    191.0,
    566.0,
    495.0,
    fill="#60714F",
    outline=""
)

# Create the Treeview widget
columns = ('#1', '#2')
tree = ttk.Treeview(window, columns=columns, show='headings')
tree.heading('#1', text='Pet Name')
tree.heading('#2', text='Gender')
tree.place(x=207.0, y=191.0, width=359.0, height=305.0)

# Populate Treeview with data
populate_treeview()

# Optionally, you can add a button to refresh the data
# refresh_button = Button(window, text="Refresh", command=populate_treeview)
# refresh_button.place(x=900.0, y=500.0)

canvas.create_rectangle(
    597.0,
    191.0,
    956.0,
    495.0,
    fill="#60714F",
    outline=""
)
# Create the second Treeview widget for owner data
owner_columns = ('#1', '#2')
owner_tree = ttk.Treeview(window, columns=owner_columns, show='headings')
owner_tree.heading('#1', text='Pet Name')
owner_tree.heading('#2', text='Owner Name')
owner_tree.place(x=597.0, y=191.0, width=359.0, height=305.0)

# Populate the second Treeview with owner data
populate_owner_treeview()

# Optionally, you can add a button to refresh the data
# refresh_button = Button(window, text="Refresh", command=populate_treeview)
# refresh_button.place(x=900.0, y=500.0)
canvas.create_rectangle(
    263.0,
    49.0,
    454.0,
    159.0,
    fill="#60714F",
    outline=""
)

canvas.create_rectangle(
    522.0,
    49.0,
    713.0,
    159.0,
    fill="#60714F",
    outline=""
)

canvas.create_text(
    278.0,
    57.0,
    anchor="nw",
    text="Available Pet",
    fill="#FFFFFF",
    font=("Inter ExtraBold", 20 * -1)
)

canvas.create_text(
    532.0,
    58.0,
    anchor="nw",
    text="Adopted Pet",
    fill="#FFFFFF",
    font=("Inter ExtraBold", 20 * -1)
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    360.5,
    115.5,
    image=entry_image_1
)

num_ids = len(ids)

# Create a Label widget to display the number of IDs
label_num_ids = Label(
    window,
    text="{}".format(num_ids),
    bg="#60714F",
    fg="#FFFFFF",
    font=("Inter ExtraBold", 30)
)
label_num_ids.place(x=293.0, y=83.0)

# Create the Entry widget for displaying ID strings==================================================================
numb_ids = len(adopt_ids)
entry_2 = Entry(
    bd=0,
    bg="#60714F",
    fg="#FFFFFF",
    highlightthickness=0,
    font=("Inter ExtraBold", 16)
)


# Create a Label widget to display the number of IDs
label_num_ids = Label(
    window,
    text="{}".format(numb_ids),
    bg="#60714F",
    fg="#FFFFFF",
    font=("Inter ExtraBold", 30)
)
label_num_ids.place(x=676.0, y=83.0)

# Create the Entry widget for displaying ID strings
entry_2 = Entry(
    bd=0,
    bg="#60714F",
    fg="#FFFFFF",
    highlightthickness=0,
    font=("Inter ExtraBold", 16)
)

# num_ids_adopt = len(adopt_ids)

# # Create a Label widget to display the number of IDs from the other table----------------------------------------------------------------------------------
# label_num_adopt = Label(
#     window,
#     # text="{}".format(adopt_ids),------------------------------------------------------------------------------------------------------
#     bg="#60714F",
#     fg="#FFFFFF",
#     font=("Inter ExtraBold", 30)
# )
# # label_num_ids_another_table.place(x=676.5, y=83.0)  # Adjusted x-coordinate to position it on entry_2

# # Create the Entry widget for displaying ID strings from the other table
# entry_2 = Entry(
#     bd=0,
#     bg="#60714F",
#     fg="#FFFFFF",
#     highlightthickness=0,
#     font=("Inter ExtraBold", 30)
# )

# Join the IDs from the other table into a string separated by newline characters
# id_string_another_table = '\n'.join([str(id[0]) for id in adopt_ids])

# Insert the ID string from the other table into the Entry widget
# entry_2.insert(0, id_string_another_table)
# entry_2.place(
#     x=546.0,
#     y=83.0,  # Adjusted y-coordinate to avoid overlapping with the label
#     width=135.0,
#     height=63.0
# )

window.resizable(False, False)
window.mainloop()
